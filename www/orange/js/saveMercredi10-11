var container, stats;
var camera, scene, renderer;
var group;
var mouseX = 0, mouseY = 0;
var WIDTH = window.screen.width,
    HEIGHT = window.screen.height;
var geometrySphere, geometryFloor;
var asteroidRed, asteroidYellow, asteroidContainer;
var radius, segments, rings;

var clock = new THREE.Clock();

var speedAsteroRed = 0, speedCamera=0, distCamera=0, acceleration = 0.04, accelerationCamera=0.04;
var colorAmbiant;
var line;
var step0=true,step1, step2, step3;

var step3Y=1;


var rotationCamera1=0;


        $(init);
        
            
        function init(){
            
            /*******
            DATGUI
            *******/
            var params = {
                interation: 5000
            };
            var gui = new dat.GUI();
            gui.add(params, 'interation')


            scene = new THREE.Scene();

            // set some camera attributes
            var VIEW_ANGLE = 45,
                ASPECT = WIDTH / HEIGHT,
                NEAR = 0.1,
                FAR = 10000;

            container = $('#container');
            renderer = new THREE.WebGLRenderer();


            /***********************
            CAMERA
            ***********************/
            camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 10000 );
            camera.position.set(-200, 150, 400 );
            camera.target = new THREE.Vector3( 0, 150, 0 );
            camera.position.z = 300;

            // add the camera to the scene
            scene.add(camera);

            // the camera starts at 0,0,0
            // so pull it back
            

            // start the renderer
            renderer.setSize(WIDTH, HEIGHT);

            // attach the render-supplied DOM element
            container.append(renderer.domElement);



            /*********************
            LIGHTS
            *********************/

            var ambientLight = new THREE.AmbientLight(0x000044);

            // create a point light
            var pointLight = new THREE.PointLight(0xFFFFFF,1,3000);

            pointLight.position.x = 0;
            pointLight.position.y = 250;
            pointLight.position.z = 130;

            scene.add(ambientLight);
            scene.add(pointLight);
            

            /*******************
             ASTEROIDS
             *******************/

            radius = 50,
            segments = 16,
            rings = 16;
            
            //____ASTERO__CONTAINER

            geometrySphereContainer =  new THREE.SphereGeometry(radius,segments,rings);
            geometrySphereContainer.dynamic = true;
            geometrySphereContainer.applyMatrix( new THREE.Matrix4().makeTranslation( 0, radius/2, 0 ) );
            
            var sphereMaterialContainer = new THREE.MeshNormalMaterial( { transparent: true, opacity: 0.5 } );

            asteroidContainer = new THREE.Mesh(geometrySphereContainer,sphereMaterialContainer);
            // add the sphere to the scene
            asteroidContainer.position.set(-200,200,0);

            // for(var v=0; v<geometrySphereContainer.vertices.length; v++){

            //     variable = Math.random()*2-1;
            //     vX = geometrySphereContainer.vertices[v].x;
            //     vY = geometrySphereContainer.vertices[v].y;
            //     vZ = geometrySphereContainer.vertices[v].z;

            //     if(vX<2*asteroidContainer.geometry.radius-10 && vY >-2*asteroidContainer.geometry.radius+10 && vY<2*asteroidContainer.geometry.radius-10 ){
            //         geometrySphereContainer.vertices[v].x = asteroidContainer.geometry.radius*2-geometrySphereContainer.vertices[v].x;
            //     }
            // }

            //____ASTERO_1
            geometrySphere =  new THREE.SphereGeometry(radius,segments,rings);
            geometrySphere.dynamic = true;
            // geometrySphere.applyMatrix( new THREE.Matrix4().makeTranslation( 0, radius/2, 0 ) );
            
            var sphereMaterial = new THREE.MeshPhongMaterial({
                wireframe:true,
                color:'red'
            });


            asteroidRed = new THREE.Mesh(geometrySphere, sphereMaterial);
            // add the sphere to the scene
            asteroidRed.position.set(0,0,0);
            asteroidContainer.add(asteroidRed);

            scene.add(asteroidContainer);

            //____ASTERO_2
            geometrySphere2 =  new THREE.SphereGeometry(
                radius,
                segments,
                rings);
            geometrySphere2.dynamic = true;

            geometrySphere2.applyMatrix( new THREE.Matrix4().makeTranslation( 0, radius/2, 0 ) );
            // create the sphere's material
            var sphereMaterial2 =
              new THREE.MeshPhongMaterial(
                {
                    wireframe:true,
                    color:'yellow'
                });
            

            // geometrySphere.computeFaceNormals();
            // geometrySphere.computeVertexNormals();

            asteroidYellow = new THREE.Mesh(geometrySphere2,
              sphereMaterial2);
            // add the sphere to the scene
            asteroidYellow.position.set(3000,200,0);
            scene.add(asteroidYellow);



            /**********************
            FLOOR
            **********************/

            var size = 1000000, step = 100;
            geometryFloor = new THREE.Geometry();

            for ( var i = - size; i <= size; i += step ) {
                geometryFloor.vertices.push( new THREE.Vector3( - size, 0, i ) );
                geometryFloor.vertices.push( new THREE.Vector3(   size, 0, i ) );
                geometryFloor.vertices.push( new THREE.Vector3( i, 0, - size ) );
                geometryFloor.vertices.push( new THREE.Vector3( i, 0,   size ) );
            }

            var material = new THREE.LineBasicMaterial( { color: 0x000000, opacity: 0.5 } );

            line = new THREE.Line( geometryFloor, material );
            line.type = THREE.LinePieces;
            scene.add( line );


            
            renderer.render(scene, camera);

            setTimeout(function(){
            	step0=false;
            	step1=true;
            },3000);

            document.addEventListener( 'mousemove', onDocumentMouseMove, false );
            animate();
        }
        
        function onDocumentMouseMove( event ) {
            mouseX = ( event.clientX - WIDTH/2 );
            mouseY = ( event.clientY - HEIGHT/2 );
        }

        //

        function animate() {
            requestAnimationFrame( animate );
            time = clock.getElapsedTime();
            delta = clock.getDelta();
            render();
            // stats.update();
        }





      var step0 = function(){
            // follow the red astero
            speedCamera += accelerationCamera;
            camera.position.x += speedCamera;
      }

      var step1 = function(){
            // camera increases velocity and rotate to look at the red asteroide
            accelerationCamera += 0.002;
            
            speedCamera += accelerationCamera;
            camera.position.x += speedCamera;
            rotationCamera1+=0.0001;
            camera.rotation.y += rotationCamera1;

            if(rotationCamera1>0.014){
                  step1=false;
                  step2=true;
                  rotationCamera1=0;
                  speedCamera -= 4;
            }
      }

      var step2 = function(){
            if(speedAsteroRed > 9)
                  speedAsteroRed -= 0.2;

            if(speedCamera > 4)
                  speedCamera -= 0.8;     

            camera.position.x += speedCamera;
            
            if(rotationCamera1<=-0.015){

                  step2=false;
                  step3=true;
                  acceleration = 0.04;
                  accelerationCamera=0.04;
                  speedAsteroRed = 9;
                  speedCamera = 9;
            } else {
                  // camera.position.x += speedCamera;
                  rotationCamera1-=0.00005;
                  camera.rotation.y += rotationCamera1;
            }
      }

      var step3 = function(){
           speedCamera += accelerationCamera;
            camera.position.x += speedCamera;

            camera.position.y += 0.2;
            

            if(camera.position.z > asteroidRed.position.z)
                  camera.position.z -= 7; 
      }



        function render() {

            /* change variables values */
            if(!step2)
            	speedAsteroRed += acceleration;
            

            // step1
            if(step0){
            	// follow the red astero
            	speedCamera += accelerationCamera;
            	camera.position.x += speedCamera;
            } 
            else if(step1){
            	// camera increases velocity and rotate to look at the red asteroide
            	accelerationCamera += 0.002;
            	
            	speedCamera += accelerationCamera;
            	camera.position.x += speedCamera;
	            rotationCamera1+=0.0001;
	            camera.rotation.y += rotationCamera1;

	            if(rotationCamera1>0.014){
	            	step1=false;
	            	step2=true;
	            	rotationCamera1=0;
	            	speedCamera -= 4;
	            }
            } 
            // step 2
            else if(step2){
            	// asteroide go ahead the camera

            	// decrease velocity
            	// acceleration+=0.02;
            	// console.log(speedAsteroRed);
            	if(speedAsteroRed > 9)
            		speedAsteroRed -= 0.2;

            	if(speedCamera > 4)
            		speedCamera -= 0.8;	

            	camera.position.x += speedCamera;
            	
            	if(rotationCamera1<=-0.015){

            		step2=false;
	            	step3=true;
	            	acceleration = 0.04;
	            	accelerationCamera=0.04;
	            	speedAsteroRed = 9;
	            	speedCamera = 9;
            	} else {
            		// camera.position.x += speedCamera;
	            	rotationCamera1-=0.00005;
	            	camera.rotation.y += rotationCamera1;
            	}

            	$("body").click(function(){
	            	console.log(speedAsteroRed);
	            })
            } else if(step3){
            	speedCamera += accelerationCamera;
            	camera.position.x += speedCamera;

            	camera.position.y += 0.2;
            	

            	if(camera.position.z > asteroidRed.position.z)
            		camera.position.z -= 7;
            }
            


       


            /* set camera positions */
            
            if(distCamera < 10)
                camera.position.z += distCamera;
            else if (distCamera > 0)
            	camera.position.z -= distCamera;

            var time = clock.getElapsedTime() * 10;
            /* move asteroids */
            asteroidRed.position.x += speedAsteroRed;
            asteroidYellow.position.x -= speedAsteroRed;

            asteroidRed.rotation.x  += 0.001;
            
            for(var v=0; v<geometrySphere.vertices.length; v++){

                variable = Math.random()*2-1;
                // Array of vector3 : 
                vX = geometrySphere.vertices[v].x;
                vY = geometrySphere.vertices[v].y;
                vZ = geometrySphere.vertices[v].z;

                if(vX<0){
                    geometrySphere.vertices[v].x +=variable;
                }
            }




            // for(var v=0; v<geometrySphere2.vertices.length; v++){

            //     variable = Math.random()*2-1;
            //     // Array of vector3 : 
            //     vX = geometrySphere2.vertices[v].x;
            //     vY = geometrySphere2.vertices[v].y;
            //     vZ = geometrySphere2.vertices[v].z;

            //     if(vX>15){
            //         geometrySphere2.vertices[v].x +=variable;
            //     }
            // }

            asteroidRed.geometry.verticesNeedUpdate = true;
            // asteroidYellow.geometry.verticesNeedUpdate = true;



            renderer.render( scene, camera );

        }
